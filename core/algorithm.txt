正文提取的两个方法：
最终都自己再用div，p这些标签提取比较好。
1.求行块分布函数
首先将网页 HTML 去净标签,只留所有正文,同时留下标签去除后的所有空
白位置信息,留下的正文称为 Ctext. 
 
定义 1.  行块: 
以 Ctext 中的行号为轴,取其周围 K 行(上下文均可,K<5,这里取 K=3,方向向下, K
称为行块厚度),合起来称为一个行块 Cblock,行块 i 是以 Ctext 中行号 i 为轴的
行块; 
 
定义 2.  行块长度: 
一个 Cblock,去掉其中的所有空白符(\n,\r,\t 等)后的字符总数称为该行块的长度; 
 
定义 3.  行块分布函数: 
以 Ctext 每行为轴,共有 LinesNum(Ctext)‐K 个 Cblock,做出以[1, LinesNum(Ctext)‐K]
为横轴,以其各自的行块长度为纵轴的分布函数;
行块分布函数可以在 O(N)时间求得,在行块分布函数图上可以直观的看出正文所在区域。
由上述行块分布函数图可明显看出,正确的文本区域全都是分布函数图上含有最值且连续的一个区域,这个区域往往含有一个骤升点和一个骤降点。 
 
于是,网页正文抽取问题转化为了求行块分布函数上的骤升骤降两个边界
点,这两个边界点所含的区域包含了当前网页的行块长度最大值并且是连续的。
2.行密度统计（可能是）
#数据挖掘
'''#src:http://www.jb51.net/article/50941.htm
平时打开一个网页，除了文章的正文内容，通常会有一大堆的导航，广告和其他方面的信息。
本文的目的，在于说明如何从一个网页中提取出文章的正文内容，而过渡掉其他无关的的信息。 
约定：
	   本文基于网页的不同行来进行统计，网页内容经过压缩的需要先解压，就是网页有正常的换行的。
	   有些新闻网页，可能新闻的文本内容比较短，但其中嵌入一个视频文件，因此，给予视频较高的权重；
	   这同样适用于图片，这里有一个不足，应该是要根据图片显示的大小来决定权重的，但本文的方法未能实现这一点。
	   由于广告，导航这些非正文内容通常以超链接的方式出现，因此文本将给予超链接的文本权重为零。
	   这里假设正文的内容是连续的，中间不包含非正文的内容，因此实际上，提取正文内容，就是找出正文内容的开始和结束的位置。      
步骤：
	   首先清除网页中CSS,Javascript,注释，Meta,Ins这些标签里面的内容，清除空白行。
	   计算每一个行的经过处理的数值（1）
	   计算上面得出的每行文本数的最大正子串的开始结束位置 
其中第二步需要说明一下：
	   对于每一行，我们需要计算一个数值，这个数值的计算如下：
			  一个图片标签img，相当于出现长度为50字符的文本 （给予的权重），x1,
			  一个视频标签embed，相当于出现长度为1000字符的文本, x2
			  一行内所有链接的标签 a 的文本长度 x3 ,
			  其他标签的文本长度 x4
			  每行的数值 = 50 * x1其出现次数 + 1000 * x2其出现次数 + x4 – 8
		//说明， -8 因为我们要计算一个最大正子串，因此要减去一个正数，至于这个数应该多大，我想还是按经验来吧。 
代码如下:'''
下述代码在计算权重时将图片或视频等链接文字替换成n个a，况且经验值这东西难以确定。
def remove_js_css (content):
	""" remove the the javascript and the stylesheet and the comment content
	(<script>....</script> and <style>....</style> <!-- xxx -->) """
	r = re.compile(r'''<script.*?</script>''',re.I|re.M|re.S)
	s = r.sub ('',content) #表示将匹配到的部分替换为空
	r = re.compile(r'''<style.*?</style>''',re.I|re.M|re.S)
	s = r.sub ('', s)
	r = re.compile(r'''<!--.*?-->''', re.I|re.M|re.S)
	s = r.sub('',s)
	r = re.compile(r'''<meta.*?>''', re.I|re.M|re.S)
	s = r.sub('',s)
	r = re.compile(r'''<ins.*?</ins>''', re.I|re.M|re.S)
	s = r.sub('',s)
	return s

def remove_empty_line (content):
	"""remove multi space """
	r = re.compile(r'''^\s+$''', re.M|re.S)
	s = r.sub ('', content)
	r = re.compile(r'''\n+''',re.M|re.S)
	s = r.sub('\n',s)
	return s

def remove_any_tag (s):
	s = re.sub(r'''<[^>]+>''','',s)
	return s.strip()
#返回所有<a标签的长度和不含标签的纯文本的长度。join(sp,list)表示用sp连接list中的每一个元素，返回字符串
def remove_any_tag_but_a (s):
	text = re.findall (r'''<a[^r][^>]*>(.*?)</a>''',s,re.I|re.S|re.S)
	text_b = remove_any_tag (s)
	return len(''.join(text)),len(text_b)

def remove_image (s,n=50):
	image = 'a' * n
	r = re.compile (r'''<img.*?>''',re.I|re.M|re.S)
	s = r.sub(image,s)
	return s

def remove_video (s,n=1000):
	video = 'a' * n
	r = re.compile (r'''<embed.*?>''',re.I|re.M|re.S)
	s = r.sub(video,s)
	return s
def sum_max (values):
	cur_max = values[0]
	glo_max = -999999
	left,right = 0,0
	for index,value in enumerate (values):
		cur_max += value
		if (cur_max > glo_max) :
			glo_max = cur_max
			right = index
		elif (cur_max < 0):
			cur_max = 0

	for i in range(right, -1, -1):
		glo_max -= values[i]
		if abs(glo_max) < 0.00001:
			left = i
			break
	return left,right+1

def slim_method_1 (content, k=1):
	if not content:
		return None,None,None,None
	tmp = content.split('\n')
	group_value = []
	for i in range(0,len(tmp),k):
		group = '\n'.join(tmp[i:i+k])
		group = remove_image (group)
		group = remove_video (group)
		text_a,text_b= remove_any_tag_but_a (group)
		temp = (text_b - text_a) - 8 
		group_value.append (temp)
	left,right = sum_max (group_value)
	return left,right, len('\n'.join(tmp[:left])), len ('\n'.join(tmp[:right]))

def extract (content):
	content = remove_empty_line(remove_js_css(content))
	left,right,x,y = slim_method_1 (content)
#return '\n'.join(content.split('\n')[left:right])
	return ''.join(content.split('\n')[left:right])
#extract return the copy of specific para of html page
#代码 从最后一个函数开始调用。

